#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         append
# Date:         01.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function appends the transient results for switching and fundamental cycles.
Inputs:     1) data:    input data array
            2) elec:    electrical input data array
            3) loss:    electrical loss data array
            4) setup:   includes all simulation variables
Outputs:    1) data:    output data array
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import pandas as pd


#######################################################################################################################
# Function
#######################################################################################################################
def app_fs(data, elec, loss, setup):
    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Switching Period
    # ==============================================================================
    if setup['Exp']['freqPar'] == 'fs':
        # ------------------------------------------
        # Electrical
        # ------------------------------------------
        for c1 in data['elec']:
            for c2 in data['elec'][c1]:      
                data['elec'][c1][c2] = pd.concat([data['elec'][c1][c2], elec[c1][c2]])

        # ------------------------------------------
        # Losses
        # ------------------------------------------
        for c1 in data['loss']:
            for c2 in data['loss'][c1]:      
                data['loss'][c1][c2] = pd.concat([data['loss'][c1][c2], loss[c1][c2]])

    # ==============================================================================
    # Electrical Period
    # ==============================================================================
    else:
        # ------------------------------------------
        # Electrical
        # ------------------------------------------
        for c1 in data['elec']:
            for c2 in data['elec'][c1]:      
                data['elec'][c1][c2] = elec[c1][c2]

        # ------------------------------------------
        # Losses
        # ------------------------------------------
        for c1 in data['loss']:
            for c2 in data['loss'][c1]:      
                data['loss'][c1][c2] = loss[c1][c2]

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return data


#######################################################################################################################
# Function
#######################################################################################################################
def app_fel(data, elec, loss, Nel, setup):
    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Switching Period
    # ==============================================================================
    if setup['Exp']['therFeed'] == 0:
        for j in range(0, Nel):
            # ------------------------------------------
            # Electrical
            # ------------------------------------------
            for c1 in data['elec']:
                for c2 in data['elec'][c1]:      
                    data['elec'][c1][c2] = pd.concat([data['elec'][c1][c2], elec[c1][c2]])

            # ------------------------------------------
            # Losses
            # ------------------------------------------
            for c1 in data['loss']:
                for c2 in data['loss'][c1]:      
                    data['loss'][c1][c2] = pd.concat([data['loss'][c1][c2], loss[c1][c2]])

    # ==============================================================================
    # Electrical Period
    # ==============================================================================
    else:
        # ------------------------------------------
        # Electrical
        # ------------------------------------------
        for c1 in data['elec']:
            for c2 in data['elec'][c1]:      
                data['elec'][c1][c2] = pd.concat([data['elec'][c1][c2], elec[c1][c2]])

        # ------------------------------------------
        # Losses
        # ------------------------------------------
        for c1 in data['loss']:
            for c2 in data['loss'][c1]:      
                data['loss'][c1][c2] = pd.concat([data['loss'][c1][c2], loss[c1][c2]])

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return data
