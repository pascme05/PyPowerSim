#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         calcDistNum
# Date:         28.04.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function calculates the numerical distortion of the current and voltage waveforms.

Input:
1) t:       input time vector (sec)
2) i_a:     phase current (A)
3) v_a:     phase voltage (V)
4) i_dc:    dc current (A)
5) v_dc:    dc voltage (V)

Output:
1) outAc:   outputs distortion ac side
2) outDc:   outputs distortion dc side
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
from scipy.fft import fft


#######################################################################################################################
# Function
#######################################################################################################################
def calcDistNum(t, i_a, v_a, i_dc, v_dc, Vdc, fel):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    Tel = 1 / fel
    dt = t[1] - t[0]
    K = int(np.round((t[-1] - t[0]) / Tel))
    N = int(len(v_a))

    # ==============================================================================
    # Variables
    # ==============================================================================
    distAc = {}
    distDc = {}

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # AC-Side
    # ==============================================================================
    V_a_eff = np.sqrt(1 / Tel / K * np.sum(v_a ** 2 * dt))
    V_a_v1_eff = (1 / np.sqrt(2)) * 2 * np.abs(fft(v_a) / N)[K]
    V_a_thd = np.sqrt(V_a_eff ** 2 - V_a_v1_eff ** 2) / V_a_eff * Vdc / 2
    I_a_eff = np.sqrt(1 / Tel / K * np.sum(i_a ** 2 * dt))
    I_a_v1_eff = (1 / np.sqrt(2)) * 2 * np.abs(fft(i_a) / N)[K]
    I_a_thd = np.sqrt(I_a_eff ** 2 - I_a_v1_eff ** 2)

    # ==============================================================================
    # DC-Side
    # ==============================================================================
    V_dc_eff = np.sqrt(1 / Tel / K * np.sum(v_dc ** 2 * dt))
    V_dc_v1_eff = np.abs(fft(v_dc) / N)[0]
    V_dc_thd = np.sqrt((np.sqrt(1 / Tel / K * np.sum((v_dc-Vdc) ** 2 * dt))) ** 2 - (np.abs(fft(v_dc-Vdc) / N)[0]) ** 2)
    I_dc_eff = np.sqrt(1 / Tel / K * np.sum(i_dc ** 2 * dt))
    I_dc_v1_eff = np.abs(fft(i_dc) / N)[0]
    I_dc_thd = np.sqrt(I_dc_eff ** 2 - I_dc_v1_eff ** 2)

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # AC-Side
    # ==============================================================================
    distAc['V_a_eff'] = V_a_eff
    distAc['V_a_v1_eff'] = V_a_v1_eff
    distAc['V_a_thd'] = V_a_thd
    distAc['I_a_eff'] = I_a_eff
    distAc['I_a_v1_eff'] = I_a_v1_eff
    distAc['I_a_thd'] = I_a_thd

    # ==============================================================================
    # DC-Side
    # ==============================================================================
    distDc['V_dc_eff'] = V_dc_eff
    distDc['V_dc_v1_eff'] = V_dc_v1_eff
    distDc['V_dc_thd'] = V_dc_thd
    distDc['I_dc_eff'] = I_dc_eff
    distDc['I_dc_v1_eff'] = I_dc_v1_eff
    distDc['I_dc_thd'] = I_dc_thd

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [distAc, distDc]
