#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         calcAvg
# Date:         01.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function calculates the average of power losses assuming fundamental or switching frequency.
Inputs:     1) top:     topology class
            2) data:    input data array
            3) setup:   all setup variables
Outputs:    1) data:    output data array
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
import pandas as pd

# ==============================================================================
# External
# ==============================================================================


#######################################################################################################################
# Function
#######################################################################################################################
def calcAvg(top, data, setup):
    ###################################################################################################################
    # Init
    ###################################################################################################################
    out = top.initData()

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Electrical
    # ==============================================================================
    if setup['Exp']['freqAvg'] == 'fel':
        for c1 in data['elec']:
            for c2 in data['elec'][c1]:
                for c3 in data['elec'][c1][c2]:
                    temp = pd.concat([data['elec'][c1][c2][c3][0:top.Nsim+1], data['elec'][c1][c2][c3], data['elec'][c1][c2][c3][-1-top.Nsim:-1]]).rolling(window=top.Nsim, center=True, closed='both', min_periods=None).mean()
                    out['elec'][c1][c2][c3] = temp[top.Nsim:-top.Nsim]
    elif setup['Exp']['freqAvg'] == 'fs':
        for c1 in data['elec']:
            for c2 in data['elec'][c1]:
                for c3 in data['elec'][c1][c2]:
                    temp = pd.concat([data['elec'][c1][c2][c3][0:top.Nsim+1], data['elec'][c1][c2][c3], data['elec'][c1][c2][c3][-1-top.Nsim:-1]]).rolling(window=int(top.Nsim/top.Npwm), center=True, closed='both', min_periods=None).mean()
                    out['elec'][c1][c2][c3] = temp[top.Nsim:-top.Nsim]

    # ==============================================================================
    # Losses
    # ==============================================================================
    if setup['Exp']['freqAvg'] == 'fel':
        for c1 in data['loss']:
            for c2 in data['loss'][c1]:
                for c3 in data['loss'][c1][c2]:
                    temp = pd.concat([data['loss'][c1][c2][c3][0:top.Nsim+1], data['loss'][c1][c2][c3], data['loss'][c1][c2][c3][-1-top.Nsim:-1]]).rolling(window=top.Nsim, center=True, closed='both', min_periods=None).mean()
                    out['loss'][c1][c2][c3] = temp[top.Nsim:-top.Nsim]
    elif setup['Exp']['freqAvg'] == 'fs':
        for c1 in data['loss']:
            for c2 in data['loss'][c1]:
                for c3 in data['loss'][c1][c2]:
                    temp = pd.concat([data['loss'][c1][c2][c3][0:top.Nsim+1], data['loss'][c1][c2][c3], data['loss'][c1][c2][c3][-1-top.Nsim:-1]]).rolling(window=int(top.Nsim/top.Npwm), center=True, closed='both', min_periods=None).mean()
                    out['loss'][c1][c2][c3] = temp[top.Nsim:-top.Nsim]

    ###################################################################################################################
    # Post
    ###################################################################################################################
    if setup['Exp']['freqAvg'] == 'fel' or setup['Exp']['freqAvg'] == 'fs':
        data = out
        
    ###################################################################################################################
    # Return
    ###################################################################################################################
    return data
