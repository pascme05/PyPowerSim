#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         sanityCheck
# Date:         27.04.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function checks the parameters for correctness. It also considers general parameters of the machine to assure
smooth calculation.
Inputs:     1) para:    all parameters used in the simulation
            2) setup:   includes all simulation variables
Outputs:    1) setup:   updated setup file
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import psutil
import numpy as np


#######################################################################################################################
# Function
#######################################################################################################################
def sanityInput(para, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("------------------------------------------")
    print("START: Sanity Checks")
    print("------------------------------------------")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    RAM_machine = psutil.virtual_memory().total
    if setup['Exp']['type'] == 2:
        RAM_use = setup['Exp']['fsim']*setup['Dat']['stat']['cyc'] * (20 + 24 + 36 + 12) * setup['Top']['fel']*setup['Dat']['trans']['tmax']
    else:
        RAM_use = setup['Exp']['fsim']*setup['Dat']['stat']['cyc'] * (20 + 24 + 36 + 12)

    ###################################################################################################################
    # General Settings
    ###################################################################################################################
    # ==============================================================================
    # RAM (PS 14/01/2023: estimation of RAM based on fsim)
    # ==============================================================================
    if RAM_machine/RAM_use < 5:
        print("WARN: Machine might run out of memory reduce 'setup['Exp']['fsim']', 'setup['Dat']['stat']['cyc']' or 'setup['Dat']['trans']['tmax']'")
    
    # ==============================================================================
    # Epsilon
    # ==============================================================================
    if setup['Exp']['eps'] * 1e3 > (1/setup['Exp']['fsim']):
        print("WARN: Numerical value 'setup['Exp']['eps']' comparatively large")
    
    ###################################################################################################################
    # Mission Profile
    ###################################################################################################################
    # ==============================================================================
    # Cycles
    # ==============================================================================
    if setup['Dat']['stat']['cyc'] < 3:
        print("WARN: To ensure convergence chose 'setup['Dat']['stat']['cyc']' >= 3")
    
    # ==============================================================================
    # Cycles
    # ==============================================================================
    if setup['Top']['sourceType'] == 'B2' or setup['Top']['sourceType'] == 'B4':
        if setup['Dat']['stat']['Mi'] > 1.0:
            setup['Dat']['stat']['Mi'] = 1.0
            print("WARN: Modulation index Mi too high, limited to 1.000")
    elif setup['Top']['sourceType'] == 'B6':
        if setup['Dat']['stat']['Mi'] > 4/np.pi:
            setup['Dat']['stat']['Mi'] = 1.0
            print("WARN: Modulation index Mi too high, limited to 1.273")

    ###################################################################################################################
    # Parameters
    ###################################################################################################################
    # ==============================================================================
    # PWM
    # ==============================================================================
    # ------------------------------------------
    # Minimum time
    # ------------------------------------------
    if (setup['Par']['PWM']['tmin'] + setup['Exp']['eps']) < (1/setup['Exp']['fsim']):
        setup['Par']['PWM']['tmin'] = 0
        print("WARN: Minimum pulse width (tmin) smaller than simulation time (tsim)")
    elif setup['Par']['PWM']['tmin'] > (1/setup['Par']['PWM']['fs']):
        setup['Par']['PWM']['tmin'] = 0
        print("ERROR: Minimum pulse width (tmin) larger than switching time (ts)")
        
    # ------------------------------------------
    # Dead time
    # ------------------------------------------
    if (setup['Par']['PWM']['td'] + setup['Exp']['eps']) < (1/setup['Exp']['fsim']):
        setup['Par']['PWM']['td'] = 0
        print("WARN: Dead-time (td) smaller than simulation time (tsim)")
    elif setup['Par']['PWM']['td'] > (1/setup['Par']['PWM']['fs']):
        setup['Par']['PWM']['td'] = 0
        print("ERROR: Dead-time (td) larger than switching time (ts)")
    
    # ------------------------------------------
    # Pulse number
    # ------------------------------------------
    if not (setup['Par']['PWM']['fs'] / setup['Top']['fel']).is_integer():
        print("WARN: Pulse-number (q) is not integer, modulation is asynchronous")
    
    # ==============================================================================
    # Electrical
    # ==============================================================================
    # ------------------------------------------
    # Switching Losses
    # ------------------------------------------
    if setup['Dat']['stat']['Vdc'] != para['Swi']['Elec']['con']['Vnom']:
        print("INFO: DC-link voltage is not equal to nominal voltage of switching loss parameters (linear scaling)")
    else:
        print("INFO: DC-link voltage is  equal to nominal voltage of switching loss parameters")
    
    # ==============================================================================
    # Thermal
    # ==============================================================================
    
    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("------------------------------------------")
    print("END: Sanity Checks")
    print("------------------------------------------")

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return setup
