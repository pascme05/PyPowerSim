#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         loadParaCap
# Date:         27.04.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function loads the parameters for the capacitor device under \par. This includes experimental, data, topology, and
electrical as well as thermal parameter information. The parameters are summarized in one common para variable.
Inputs:     1) name:    name of the parameter file for the capacitor
            2) path:    includes all path variables
            2) setup:   includes all simulation variables
Outputs:    1) para:    output parameter file for the capacitor
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import pandas as pd
from os.path import join as pjoin


#######################################################################################################################
# Function
#######################################################################################################################
def loadParaCap(name, path, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("INFO: Loading capacitor parameters")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Variables
    # ==============================================================================
    para = {'Elec': {}, 'Ther': {}, 'Life': {}}
    para['Elec']['con'] = {}
    para['Elec']['vec'] = {}
    para['Elec']['tab'] = {}
    para['Ther']['con'] = {}
    para['Ther']['vec'] = {}
    para['Ther']['tab'] = {}
    para['Life']['con'] = {}
    para['Life']['tab'] = {}

    # ==============================================================================
    # Parameters
    # ==============================================================================
    col = ['Value-1', 'Value-2', 'Value-3', 'Value-4', 'Value-5', 'Value-6', 'Value-7', 'Value-8', 'Value-9',
           'Value-10']
    tab = ['Description', 'Model', 'Symbol', 'Typical', 'Value-1', 'Value-2', 'Value-3', 'Value-4', 'Value-5',
           'Value-6']
    lenElec = 10
    lenTher = 4

    ###################################################################################################################
    # Loading Data
    ###################################################################################################################
    # ==============================================================================
    # Path
    # ==============================================================================
    name = name + '.xlsx'
    filename = pjoin(path, 'Cap', name)

    # ==============================================================================
    # Parameters
    # ==============================================================================
    dataElec = pd.read_excel(filename, sheet_name='electrical')
    dataTher = pd.read_excel(filename, sheet_name='thermal')

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Electrical
    # ==============================================================================
    varElecNamesCon = dataElec['Symbol'][0:lenElec]
    varElecValueCon = dataElec['Typical'][0:lenElec]
    varElecValueTab = dataElec.loc[:, col][0:lenElec]

    # ==============================================================================
    # Thermal
    # ==============================================================================
    varTherNamesCon = dataTher['Symbol'][0:lenTher]
    varTherValueCon = dataTher['Typical'][0:lenTher]
    varTherValueTab = dataTher.loc[:, col][0:lenTher]

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Electrical
    # ==============================================================================
    # ------------------------------------------
    # Constant values
    # ------------------------------------------
    for i in range(0, len(varElecNamesCon)):
        para['Elec']['con'][varElecNamesCon[i]] = varElecValueCon[i]
        para['Elec']['vec'][varElecNamesCon[i]] = varElecValueTab.iloc[i]

    # ------------------------------------------
    # Tabular values
    # ------------------------------------------
    para['Elec']['tab']['C'] = dataElec[tab][31:41]
    para['Elec']['tab']['tan'] = dataElec[tab][51:61]
    para['Elec']['tab']['Kr'] = dataElec[tab][71:81]
    para['Elec']['tab']['ESR'] = dataElec[tab][91:101]

    # ==============================================================================
    # Thermal
    # ==============================================================================
    for i in range(0, len(varTherNamesCon)):
        para['Ther']['con'][varTherNamesCon[i]] = varTherValueCon[i]
        para['Ther']['vec'][varTherNamesCon[i]] = varTherValueTab.iloc[i]

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Remove NaNs
    # ==============================================================================
    # ------------------------------------------
    # Vectors
    # ------------------------------------------
    # Electrical
    for i in range(0, len(varElecNamesCon)):
        para['Elec']['vec'][varElecNamesCon[i]] = para['Elec']['vec'][varElecNamesCon[i]].dropna(axis=0, how='all')

    # Thermal
    for i in range(0, len(varTherNamesCon)):
        para['Ther']['vec'][varTherNamesCon[i]] = para['Ther']['vec'][varTherNamesCon[i]].dropna(axis=0, how='all')

    # ------------------------------------------
    # Matrix
    # ------------------------------------------
    para['Elec']['tab']['C'] = para['Elec']['tab']['C'].dropna(axis=0, how='all')
    para['Elec']['tab']['C'] = para['Elec']['tab']['C'].dropna(axis=1, how='all')
    para['Elec']['tab']['tan'] = para['Elec']['tab']['tan'].dropna(axis=0, how='all')
    para['Elec']['tab']['tan'] = para['Elec']['tab']['tan'].dropna(axis=1, how='all')
    para['Elec']['tab']['Kr'] = para['Elec']['tab']['Kr'].dropna(axis=0, how='all')
    para['Elec']['tab']['Kr'] = para['Elec']['tab']['Kr'].dropna(axis=1, how='all')
    para['Elec']['tab']['ESR'] = para['Elec']['tab']['ESR'].dropna(axis=0, how='all')
    para['Elec']['tab']['ESR'] = para['Elec']['tab']['ESR'].dropna(axis=1, how='all')

    # ==============================================================================
    # Losses
    # ==============================================================================
    if setup['Par']['PWM']['loss'] == 0:
        # ------------------------------------------
        # Matrix
        # ------------------------------------------
        para['Elec']['tab']['ESR'] = para['Elec']['tab']['ESR'] * 0
        para['Elec']['tab']['tan'] = para['Elec']['tab']['tan'] * 0
        para['Elec']['tab']['Kr'] = para['Elec']['tab']['Kr'] * 0

        # ------------------------------------------
        # Constant
        # ------------------------------------------
        para['Elec']['con']['ESR'] = para['Elec']['con']['ESR'] * 0
        para['Elec']['con']['tan'] = para['Elec']['con']['tan'] * 0
        para['Elec']['con']['Kr'] = para['Elec']['con']['Kr'] * 0

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return para
