#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         calcTimeB6
# Date:         01.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function calculates the time domain output of the B4 full-bridge circuit.
Inputs:     1) t:       input time vector (sec)
            2) s:       switching function
            3) e:       induced voltage
            4) Vdc:     dc link voltage (V)
            5) Mi:      modulation index (p.u.)
            6) mdl:     model transfer functions
            7) setup:   file including all setup variables
            8) start:   starting sample for evaluation
            9) ende:    end sample for the evaluation
Outputs:    1) timeAc:  results in the time domain Ac
            2) timeDc:  results in the time domain Dc
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import scipy.signal as sig


#######################################################################################################################
# Function
#######################################################################################################################
def calcTimeB6(t, s, e, Vdc, Mi, mdl, setup, start, ende):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    id1 = ['A', 'B', 'C']
    fel = setup['Top']['fel']
    K = int((ende-start-1)*fel*(t[1] - t[0]))

    # ==============================================================================
    # Variables
    # ==============================================================================
    v0 = {}
    v = {}
    v_out = {}
    v_L = {}
    i = {}
    timeAc = {}
    timeDc = {}

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # AC-Side
    # ==============================================================================
    # ------------------------------------------
    # Inverter Output
    # ------------------------------------------
    for j in range(0, len(id1)):
        v0[id1[j]] = 0.5 * (s[id1[j]] - np.mean(s[id1[j]])) * Vdc
    v_n0 = 1 / 3 * (v0['A'] + v0['B'] + v0['C'])

    # ------------------------------------------
    # Phase Voltages
    # ------------------------------------------
    for j in range(0, len(id1)):
        v[id1[j]] = v0[id1[j]] - v_n0

    # ------------------------------------------
    # Filter Output
    # ------------------------------------------
    for j in range(0, len(id1)):
        if setup['Top']['outFilter'] == 0:
            v_out[id1[j]] = v[id1[j]]
        else:
            _, v_out[id1[j]], _, = sig.lsim(mdl['SS']['Out'], v[id1[j]], t)

    # ------------------------------------------
    # Load
    # ------------------------------------------
    # Voltage
    for j in range(0, len(id1)):
        v_L[id1[j]] = v_out[id1[j]] - Mi * e[id1[j]]

    # LL Current
    _, i_a, _, = sig.lsim(mdl['SS']['Load'], v_L['A'], t)
    i['A'] = i_a[start:ende]
    i['B'] = np.roll(i_a[start:ende], int(np.floor(120 / 360 / K * len(s['A'][start:ende]))))
    i['C'] = np.roll(i_a[start:ende], int(np.floor(240 / 360 / K * len(s['A'][start:ende]))))

    # LN Current
    if setup['Top']['wave'] != 'con':
        for j in range(0, len(id1)):
            i[id1[j]] = i[id1[j]] - np.mean(i[id1[j]])

    # ==============================================================================
    # DC-Side
    # ==============================================================================
    # ------------------------------------------
    # Inverter Input
    # ------------------------------------------
    i_dc = 1 / 2 * (s['A'][start:ende] * i['A'] + s['B'][start:ende] * i['B'] + s['C'][start:ende] * i['C'])

    # ------------------------------------------
    # DC-Link
    # ------------------------------------------
    i_cap = np.mean(i_dc) - i_dc
    _, v_dc, _, = sig.lsim(mdl['SS']['DC'], i_cap, t[start:ende])
    v_dc = v_dc - np.mean(v_dc) + Vdc

    # ------------------------------------------
    # Filter Input
    # ------------------------------------------
    if setup['Top']['inpFilter'] == 0:
        v_in = v_dc
    else:
        _, v_in, _, = sig.lsim(mdl['SS']['Inp'], (v_dc - Vdc), t[start:ende])
        v_in = v_in + Vdc

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # AC-Side
    # ==============================================================================
    timeAc['v_a0'] = v0['A'][start:ende]
    timeAc['v_a'] = v['A'][start:ende]
    timeAc['v_L_a'] = v_L['A'][start:ende]
    timeAc['v_a_out'] = v_out['A'][start:ende]
    timeAc['v_n0'] = v_n0[start:ende]
    timeAc['i_a'] = i['A']
    timeAc['i_b'] = i['B']
    timeAc['i_c'] = i['C']

    # ==============================================================================
    # DC-Side
    # ==============================================================================
    timeDc['v_in'] = v_in
    timeDc['v_dc'] = v_dc
    timeDc['i_dc'] = i_dc
    timeDc['i_c'] = i_cap

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [timeAc, timeDc]
