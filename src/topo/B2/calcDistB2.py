#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         calcDistB2
# Date:         01.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function calculates the analytical distortion functions for the B2 bridge.
Inputs:     1) Vdc:     DC-link voltage for the converter cell (V)
            2) Mi:      modulation index (p.u.)
            3) setup:   includes all simulation variables
Outputs:    1) distAc:  Ac distortion waveforms
            2) distDc:  Dc distortion waveforms
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Function
#######################################################################################################################
def calcDistB2_Ana(Mi, Vdc, setup):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Init
    # ==============================================================================
    distAc = {}
    distDc = {}
    
    # ==============================================================================
    # Parameters
    # ==============================================================================
    fs = setup['Par']['PWM']['fs']
    fel = setup['Top']['fel']
    Ts = 1/fs
    L = setup['Top']['L']
    R = setup['Top']['R']
    Z = np.sqrt(R**2 + (2*np.pi*fel*L)**2)
    
    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # AC-Side
    # ==============================================================================
    V_a0_eff = Vdc/2
    V_a0_v1_eff = 1/np.sqrt(2) * Vdc/2 * Mi
    V_a0_thd = Vdc/2 * np.sqrt(1 - Mi**2/2)
    I_a_eff = V_a0_eff / Z 
    I_a_v1_eff = V_a0_v1_eff / Z 
    I_a_thd = 1/np.sqrt(48) * Vdc/2 * Ts/L * np.sqrt(3/8*Mi**4 - Mi**2 + 1)
    
    # ==============================================================================
    # DC-Side
    # ==============================================================================
    V_dc_eff = Mi * 4 / np.pi * Vdc/2
    I_dc_thd = 1/np.sqrt(48) * Vdc/2 * Ts/L * np.sqrt(3/8*Mi**4 - Mi**2 + 1)
    
    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # AC-Side
    # ==============================================================================
    distAc['V_a_eff'] = V_a0_eff
    distAc['V_a_v1_eff'] = V_a0_v1_eff
    distAc['V_a_thd'] = V_a0_thd
    distAc['I_a_eff'] = I_a_eff
    distAc['I_a_v1_eff'] = I_a_v1_eff
    distAc['I_a_thd'] = I_a_thd
    
    # ==============================================================================
    # DC-Side
    # ==============================================================================
    distDc['V_dc_eff'] = V_dc_eff
    distDc['V_dc_v1_eff'] = 0
    distDc['V_dc_thd'] = 0
    distDc['I_dc_eff'] = 0
    distDc['I_dc_v1_eff'] = 0
    distDc['I_dc_thd'] = I_dc_thd
    
    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [distAc, distDc]
