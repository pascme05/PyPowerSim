#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         calcTimeB4
# Date:         01.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function calculates the time domain output of the B4 full-bridge circuit.
Inputs:     1) t:       input time vector (sec)
            2) s:       switching function
            3) e:       induced voltage
            4) Vdc:     dc link voltage (V)
            5) Mi:      modulation index (p.u.)
            6) mdl:     model transfer functions
            7) setup:   file including all setup variables
            8) start:   starting sample for evaluation
            9) ende:    end sample for the evaluation
Outputs:    1) timeAc:  results in the time domain Ac
            2) timeDc:  results in the time domain Dc
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import scipy.signal as sig


#######################################################################################################################
# Function
#######################################################################################################################
def calcTimeB4(t, s, e, Vdc, Mi, mdl, setup, start, ende):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    timeAc = {}
    timeDc = {}
    
    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # AC-Side
    # ==============================================================================
    # ------------------------------------------
    # Inverter Output
    # ------------------------------------------
    v_a0 = 0.5*s['A']*Vdc
    v_b0 = 0.5*s['B']*Vdc
    v_ab = v_a0 - v_b0
    
    # ------------------------------------------
    # Filter Output
    # ------------------------------------------
    if setup['Top']['outFilter'] == 0:
        v_out = v_ab
    else:
        _, v_out, _, = sig.lsim(mdl['SS']['Out'], v_ab, t)
    
    # ------------------------------------------
    # Load 
    # ------------------------------------------
    # Voltage
    v_L = v_out - Mi*e
    
    # Current
    if setup['Top']['wave'] == "con":
        _, i_a, _, = sig.lsim(mdl['SS']['Load'], v_L, t)
        i_a = i_a[start:ende]
    else: 
        _, i_a, _, = sig.lsim(mdl['SS']['Load'], (v_L - np.mean(v_L)), t)
        i_a = i_a[start:ende]
        i_a = i_a - np.mean(i_a)

    # ==============================================================================
    # DC-Side
    # ==============================================================================
    # ------------------------------------------
    # Inverter Input
    # ------------------------------------------
    i_dc = i_a/2 * (s['A'][start:ende] - s['B'][start:ende])
    
    # ------------------------------------------
    # DC-Link
    # ------------------------------------------
    i_c = np.mean(i_dc) - i_dc
    _, v_dc, _, = sig.lsim(mdl['SS']['DC'], i_c, t[start:ende])
    
    # ------------------------------------------
    # Filter Input
    # ------------------------------------------
    if setup['Top']['inpFilter'] == 0:
        v_in = v_dc
    else:
        _, v_in, _, = sig.lsim(mdl['SS']['Inp'], (v_dc-Vdc), t[start:ende])
        v_in = v_in + Vdc
        
    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # AC-Side
    # ==============================================================================
    timeAc['v_a0'] = v_a0[start:ende]
    timeAc['v_b0'] = v_a0[start:ende]
    timeAc['v_L'] = v_L[start:ende]
    timeAc['v_out'] = v_out[start:ende]
    timeAc['v_a'] = v_ab[start:ende]
    timeAc['i_a'] = i_a
    
    # ==============================================================================
    # DC-Side
    # ==============================================================================
    timeDc['v_in'] = v_in
    timeDc['v_dc'] = v_dc
    timeDc['i_dc'] = i_dc
    timeDc['i_c'] = i_c
    
    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [timeAc, timeDc]
