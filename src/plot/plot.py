#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         plot
# Date:         14.08.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.2
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.plot.plotSweep_B2 import plotSweep_B2
from src.plot.plotStat_B2 import plotStat_B2
from src.plot.plotTrans_B2 import plotTrans_B2
from src.plot.plotSweep_B4 import plotSweep_B4
from src.plot.plotStat_B4 import plotStat_B4
from src.plot.plotTrans_B4 import plotTrans_B4
from src.plot.plotSweep_B6 import plotSweep_B6
from src.plot.plotStat_B6 import plotStat_B6
from src.plot.plotTrans_B6 import plotTrans_B6
from src.plot.plotGen import plotGenTF, plotGenLoss, plotGenTher


# ==============================================================================
# External
# ==============================================================================
import matplotlib.style as mplstyle
mplstyle.use('fast')


#######################################################################################################################
# Function
#######################################################################################################################
def plot(mdl, para, time, freq, sweep, setupPara, setupData, setupTopo, setupExp):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("------------------------------------------")
    print("START: Plotting")
    print("------------------------------------------")

    ###################################################################################################################
    # General
    ###################################################################################################################
    if setupExp['plotGen'] == 1:
        # ------------------------------------------
        # Msg
        # ------------------------------------------
        print("INFO: Plotting general information")

        # ------------------------------------------
        # Bode Plots
        # ------------------------------------------
        try:
            plotGenTF(mdl, setupPara, setupTopo)
        except:
            print("WARN: Bode plots could not been created")

        # ------------------------------------------
        # Loss Models
        # ------------------------------------------
        try:
            plotGenLoss(para, setupPara, setupData)
        except:
            print("WARN: Loss plots could not been created")

        # ------------------------------------------
        # Thermal Models
        # ------------------------------------------
        try:
            plotGenTher(para)
        except:
            print("WARN: Thermal plots could not been created")

    ###################################################################################################################
    # B2
    ###################################################################################################################
    if setupTopo['sourceType'] == "B2":
        # ------------------------------------------
        # Sweep
        # ------------------------------------------
        if setupExp['type'] == 0:
            plotSweep_B2(time, freq, sweep, setupPara, setupData, setupTopo, setupExp)

        # ------------------------------------------
        # Stationary
        # ------------------------------------------
        if setupExp['type'] == 1:
            plotStat_B2(time, freq, setupPara, setupData, setupTopo, setupExp)

        # ------------------------------------------
        # Transient
        # ------------------------------------------
        if setupExp['type'] == 2:
            plotTrans_B2(time, freq, setupPara, setupData, setupTopo, setupExp)

    ###################################################################################################################
    # B4
    ###################################################################################################################
    if setupTopo['sourceType'] == "B4":
        # ------------------------------------------
        # Sweep
        # ------------------------------------------
        if setupExp['type'] == 0:
            plotSweep_B4(time, freq, sweep, setupPara, setupData, setupTopo, setupExp)

        # ------------------------------------------
        # Stationary
        # ------------------------------------------
        if setupExp['type'] == 1:
            plotStat_B4(time, freq, setupPara, setupData, setupTopo, setupExp)

        # ------------------------------------------
        # Transient
        # ------------------------------------------
        if setupExp['type'] == 2:
            plotTrans_B4(time, freq, setupPara, setupData, setupTopo, setupExp)

    ###################################################################################################################
    # B6
    ###################################################################################################################
    if setupTopo['sourceType'] == "B6":
        # ------------------------------------------
        # Sweep
        # ------------------------------------------
        if setupExp['type'] == 0:
            plotSweep_B6(time, freq, sweep, setupPara, setupData, setupTopo, setupExp)

        # ------------------------------------------
        # Stationary
        # ------------------------------------------
        if setupExp['type'] == 1:
            plotStat_B6(time, freq, setupPara, setupData, setupTopo, setupExp)

        # ------------------------------------------
        # Transient
        # ------------------------------------------
        if setupExp['type'] == 2:
            plotTrans_B6(time, freq, setupPara, setupData, setupTopo, setupExp)

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("------------------------------------------")
    print("END: Plotting waveforms")
    print("------------------------------------------")

    ###################################################################################################################
    # Return
    ###################################################################################################################
