#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         plotResults
# Date:         14.08.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.2
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.general.helpFnc import rms

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import math


#######################################################################################################################
# Function
#######################################################################################################################
def plotResults(time, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("------------------------------------------")
    print("START: Printing Results")
    print("------------------------------------------")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Labels
    # ==============================================================================
    if setup['Top']['sourceType'] == 'B2':
        id1 = ['S1', 'S2']
        id2 = ['T1', 'T2']
        id3 = ['D1', 'D2']
        lab = ['S1', 'S2', 'C1']
    elif setup['Top']['sourceType'] == 'B4':
        id1 = ['S1', 'S2', 'S3', 'S4']
        id2 = ['T1', 'T2', 'T3', 'T4']
        id3 = ['D1', 'D2', 'D3', 'D4']
        lab = ['S1', 'S2', 'S3', 'S4', 'C1']
    elif setup['Top']['sourceType'] == 'B6':
        id1 = ['S1', 'S2', 'S3', 'S4', 'S5', 'S6']
        id2 = ['T1', 'T2', 'T3', 'T4', 'T5', 'T6']
        id3 = ['D1', 'D2', 'D3', 'D4', 'D5', 'D6']
        lab = ['S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'C1']
    else:
        print("WARN: Invalid topology assuming B6")
        id1 = ['S1', 'S2', 'S3', 'S4', 'S5', 'S6']
        id2 = ['T1', 'T2', 'T3', 'T4', 'T5', 'T6']
        id3 = ['D1', 'D2', 'D3', 'D4', 'D5', 'D6']
        lab = ['S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'C1']

    # ==============================================================================
    # Parameters
    # ==============================================================================
    fel = setup['Top']['fel']
    R = setup['Top']['R']
    L = setup['Top']['L']
    angZ = math.atan2(2 * np.pi * fel * L, R)
    magZ = np.sqrt(R ** 2 + (2 * np.pi * fel * L) ** 2)

    # ==============================================================================
    # Variables
    # ==============================================================================
    pt = time['Ac']['i_a'] * time['Ac']['v_a0']

    # ==============================================================================
    # Init
    # ==============================================================================
    I_ALL = np.zeros((len(id1) + 1, 3))
    V_ALL = np.zeros((len(id1) + 1, 3))
    P_ALL = np.zeros((len(id1) + 1, 4))
    T_ALL = np.zeros((len(id1) + 1, 4))
    E_ALL = np.zeros((len(id1) + 1, 1))

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Component Level
    # ==============================================================================
    # ------------------------------------------
    # Switches
    # ------------------------------------------
    for i in range(0, len(time['Elec']['sw'])):
        # Currents
        I_ALL[i, 0] = np.max(time['Elec']['sw'][id1[i]]['i_T'] + time['Elec']['sw'][id1[i]]['i_D'])
        I_ALL[i, 1] = np.mean(time['Elec']['sw'][id1[i]]['i_T'] + time['Elec']['sw'][id1[i]]['i_D'])
        I_ALL[i, 2] = rms(time['Elec']['sw'][id1[i]]['i_T'] + time['Elec']['sw'][id1[i]]['i_D'])

        # Currents
        V_ALL[i, 0] = np.max(time['Elec']['sw'][id1[i]]['v_T'])
        V_ALL[i, 1] = np.mean(time['Elec']['sw'][id1[i]]['v_T'])
        V_ALL[i, 2] = rms(time['Elec']['sw'][id1[i]]['v_T'])

        # Losses
        P_ALL[i, 0] = np.mean(time['Loss']['sw'][id1[i]]['p_T_s'])
        P_ALL[i, 1] = np.mean(time['Loss']['sw'][id1[i]]['p_T_c'])
        P_ALL[i, 2] = np.mean(time['Loss']['sw'][id1[i]]['p_D_s'])
        P_ALL[i, 3] = np.mean(time['Loss']['sw'][id1[i]]['p_D_c'])

        # Thermal
        T_ALL[i, 0] = np.max(time['Ther']['sw'][id2[i]])
        T_ALL[i, 1] = np.mean(time['Ther']['sw'][id2[i]])
        T_ALL[i, 2] = np.max(time['Ther']['sw'][id3[i]])
        T_ALL[i, 3] = np.mean(time['Ther']['sw'][id3[i]])

        # Efficiency
        E_ALL[i, 0] = np.abs(rms(pt) - np.mean(time['Loss']['sw'][id1[i]]['p_T'])) / rms(pt)

    # ------------------------------------------
    # Capacitor
    # ------------------------------------------
    # Currents
    I_ALL[-1, 0] = np.max(time['Elec']['cap']['C1']['i_c'])
    I_ALL[-1, 1] = np.mean(time['Elec']['cap']['C1']['i_c'])
    I_ALL[-1, 2] = rms(time['Elec']['cap']['C1']['i_c'])

    # Currents
    V_ALL[-1, 0] = np.max(time['Elec']['cap']['C1']['v_c'])
    V_ALL[-1, 1] = np.mean(time['Elec']['cap']['C1']['v_c'])
    V_ALL[-1, 2] = rms(time['Elec']['cap']['C1']['v_c'])

    # Losses
    P_ALL[-1, 0] = np.mean(time['Loss']['cap']['C1']['p_L']) / 4
    P_ALL[-1, 1] = np.mean(time['Loss']['cap']['C1']['p_L']) / 4
    P_ALL[-1, 2] = np.mean(time['Loss']['cap']['C1']['p_L']) / 4
    P_ALL[-1, 3] = np.mean(time['Loss']['cap']['C1']['p_L']) / 4

    # Thermal
    T_ALL[-1, 0] = np.max(time['Ther']['cap']['C1'])
    T_ALL[-1, 1] = np.mean(time['Ther']['cap']['C1'])
    T_ALL[-1, 2] = np.max(time['Ther']['cap']['C1'])
    T_ALL[-1, 3] = np.mean(time['Ther']['cap']['C1'])

    # Efficiency
    E_ALL[-1, 0] = np.abs(rms(pt) - np.mean(time['Loss']['cap']['C1']['p_L'])) / rms(pt)

    # ==============================================================================
    # Converter Level
    # ==============================================================================
    # ------------------------------------------
    # Load
    # ------------------------------------------
    Iph = rms(time['Ac']['i_a'])
    Vph = rms(time['Ac']['v_a0'])

    # ------------------------------------------
    # Power
    # ------------------------------------------
    S = magZ * rms(time['Ac']['i_a']) ** 2
    P = S * np.cos(angZ)
    Q = np.sqrt(S ** 2 - P ** 2)
    PF = P / S

    # ------------------------------------------
    # Others
    # ------------------------------------------
    # Currents
    I_CON = [np.max(I_ALL[:, 0]), np.mean(I_ALL[:, 1]), rms(I_ALL[:, 2])]

    # Voltages
    V_CON = [np.max(V_ALL[:, 0]), np.mean(V_ALL[:, 1]), rms(V_ALL[:, 2])]

    # Losses
    P_CON = [np.sum(P_ALL[:, 0]), np.sum(P_ALL[:, 1]), np.sum(P_ALL[:, 2]), np.sum(P_ALL[:, 3])]

    # Thermal
    T_CON = [np.max(T_ALL[:, 0]), np.mean(T_ALL[:, 1]), np.max(T_ALL[:, 2]), np.mean(T_ALL[:, 3])]

    # Efficiency
    E_CON = np.abs(P - np.sum(np.sum(P_ALL))) / P

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    print(
        '|          |                       OUTPUT                     |                     CURRENT AND VOLTAGE                   |            AVERAGE LOSSES             |                THERMAL                |   Eta   |')
    print(
        '| item ID  | P (W)  | Q (VA) | PF (p.u) | I_ph (A) | V_ph (V) |  I_MAX  |  I_AVG  |  I_RMS  |  V_MAX  |  V_AVG  |  V_RMS  |  P_T_s  |  P_T_c  |  P_D_s  |  P_D_c  | T_T_MAX | T_T_AVG | T_D_MAX | T_D_AVG |    -    |')
    print(
        '|----------|--------|--------|----------|----------|----------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|')
    for i in range(0, len(id1) + 1):
        if i == len(id1):
            print(
                '| %-8s |   --   |   --   |    --    |    --    |    --    |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |                 %5.2f                 |                 %5.1f                 |  %5.2f  |' % (
                    lab[i], I_ALL[i, 0], I_ALL[i, 1], I_ALL[i, 2], V_ALL[i, 0], V_ALL[i, 1], V_ALL[i, 2],
                    P_ALL[i, 0] * 4, T_ALL[i, 0], E_ALL[i, 0] * 100))
            print(
                '|----------|--------|--------|----------|----------|----------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|')
        else:
            print(
                '| %-8s |   --   |   --   |    --    |    --    |    --    |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.2f  |  %5.2f  |  %5.2f  |  %5.2f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.2f  |' % (
                    lab[i], I_ALL[i, 0], I_ALL[i, 1], I_ALL[i, 2], V_ALL[i, 0], V_ALL[i, 1], V_ALL[i, 2], P_ALL[i, 0],
                    P_ALL[i, 1], P_ALL[i, 2], P_ALL[i, 3], T_ALL[i, 0], T_ALL[i, 1], T_ALL[i, 2], T_ALL[i, 3],
                    E_ALL[i, 0] * 100))
            print(
                '|----------|--------|--------|----------|----------|----------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|')
    print(
        '|----------|--------|--------|----------|----------|----------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|')
    print(
        '|  Total   |  %5.0f |  %5.0f |  %5.2f   |  %5.1f   |  %5.1f   |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.1f  |  %5.2f  |' % (
            P, Q, PF, Iph, Vph, I_CON[0], I_CON[1], I_CON[2], V_CON[0], V_CON[1], V_CON[2], P_CON[0], P_CON[1],
            P_CON[2], P_CON[3], T_CON[0], T_CON[1], T_CON[2], T_CON[3], E_CON * 100))

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("------------------------------------------")
    print("END: Printing Results")
    print("------------------------------------------")

    ###################################################################################################################
    # Return
    ###################################################################################################################
