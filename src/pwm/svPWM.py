#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         svPWM
# Date:         14.08.2023
# Author:       Dr. Pascal A. Schirmer
# Version:      V.0.2
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np


#######################################################################################################################
# Function
#######################################################################################################################
def svPWM(k, alpha, Mi):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    R = 1
    t0 = 0
    t1 = 0
    t2 = 0
    t7 = 0
    
    ###################################################################################################################
    # Pre-processing
    ###################################################################################################################
    # ==============================================================================
    # Find Sector
    # ==============================================================================
    # ------------------------------------------
    # Reduce to 2pi
    # ------------------------------------------
    while alpha >= 2*np.pi:
        alpha = alpha - 2*np.pi
    
    # ------------------------------------------
    # Determine Sector
    # ------------------------------------------
    while alpha > np.pi/3:
        alpha = alpha - np.pi/3
        R = R + 1

    # ------------------------------------------
    # Get sector part
    # ------------------------------------------
    if alpha > np.pi/6:
        idx = 1
    else:
        idx = 0
    rr = R

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Under-Modulation
    # ==============================================================================
    if Mi <= 2/np.sqrt(3):
        if (R % 2) == 0:
            t2 = np.sqrt(3)/2*Mi*np.sin(np.pi/3 - alpha)
            t1 = np.sqrt(3)/2*Mi*np.sin(alpha)
        else:
            t1 = np.sqrt(3)/2*Mi*np.sin(np.pi/3 - alpha)
            t2 = np.sqrt(3)/2*Mi*np.sin(alpha)
        Tz = 1 - t1 - t2
        t0 = Tz * k[idx][R-1]
        t7 = Tz * (1-k[idx][R-1])
    
    # ==============================================================================
    # Over-Modulation (tbi)
    # ==============================================================================
    # ------------------------------------------
    # First Region
    # ------------------------------------------
    if 2/np.sqrt(3) < Mi <= 0.9517/np.pi*4:
        if (R % 2) == 0:
            t2 = (np.sqrt(3)*np.cos(alpha) - np.sin(alpha))/(np.sqrt(3)*np.cos(alpha) + np.sin(alpha))
            t1 = 1 - t2
        else:
            t1 = (np.sqrt(3)*np.cos(alpha) - np.sin(alpha))/(np.sqrt(3)*np.cos(alpha) + np.sin(alpha))
            t2 = 1 - t1
        t0 = 0
        t7 = 0

    # ------------------------------------------
    # Second Region
    # ------------------------------------------
    if 0.9517/np.pi*4 < Mi < 4/np.pi:
        # Holding angle
        if 0.9517/np.pi*4 <= Mi < 0.9800/np.pi*4:
            alpha_h = 6.40*Mi/4*np.pi - 6.09
        elif 0.9800/np.pi*4 < Mi < 0.9975/np.pi*4:
            alpha_h = 11.75*Mi/4*np.pi - 11.34
        else:
            alpha_h = 48.96*Mi/4*np.pi - 48.43

        # Comparison
        if 0 <= alpha < alpha_h:
            alpha_o = 0
        elif alpha_h <= alpha < np.pi/3 - alpha_h:
            alpha_o = (np.pi/6)*(alpha - alpha_h)/(np.pi/6 - alpha_h)
        else:
            alpha_o = np.pi/3

        # Times
        if (R % 2) == 0:
            t2 = (np.sqrt(3)*np.cos(alpha_o) - np.sin(alpha_o))/(np.sqrt(3)*np.cos(alpha_o) + np.sin(alpha_o))
            t1 = 1 - t2
        else:
            t1 = (np.sqrt(3)*np.cos(alpha_o) - np.sin(alpha_o))/(np.sqrt(3)*np.cos(alpha_o) + np.sin(alpha_o))
            t2 = 1 - t1
        t0 = 0
        t7 = 0

    # ------------------------------------------
    # Third Region (Six-Step)
    # ------------------------------------------
    if Mi == 4/np.pi:
        if alpha < np.pi/6:
            if (R % 2) == 0:
                t2 = 1
                t1 = 0
            else:
                t1 = 1
                t2 = 0
        else:
            if (R % 2) == 0:
                t1 = 1
                t2 = 0
            else:
                t2 = 1
                t1 = 0
        t0 = 0
        t7 = 0

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [t0, t1, t2, t7, rr]
