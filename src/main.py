#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         main
# Date:         27.04.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function builds the main part of the simulation. It takes the setup files and path variables as input and
executes the program.
Inputs:     1) setup:   includes all simulation variables
            2) path:    includes all path variables
Outputs:    None
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.data.loadPara import loadPara
from src.data.loadSetup import loadSetup
from src.calcSweep import calcSweep
from src.calcSteady import calcSteady
from src.calcTrans import calcTrans
from src.calcClose import calcClose
from src.topo.initTopo import initTopo
from src.plot.plot import plot
from src.plot.plotResults import plotResults
from src.general.genTF import genTF
from src.general.sanityCheck import sanityInput
from src.general.saveResults import saveResults
from src.general.genLoadInput import genLoadInput

# ==============================================================================
# External
# ==============================================================================
import sys


#######################################################################################################################
# Steady-State
#######################################################################################################################
def main(setup, path):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("----------------------------------------------------------------------------------------------------------")
    print("----------------------------------------------------------------------------------------------------------")
    print("Welcome to the Power Electronics Distortion Toolkit!")
    print("Author:     Dr. Pascal Alexander Schirmer")
    print("Copyright:  Pascal Schirmer")
    print("Version:    v.1.0")
    print("Date:       27.04.2024")
    print("----------------------------------------------------------------------------------------------------------")
    print("----------------------------------------------------------------------------------------------------------")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Variables
    # ==============================================================================
    time = []
    freq = []
    sweep = []

    ###################################################################################################################
    # Loading
    ###################################################################################################################
    # ==============================================================================
    # MSG IN
    # ==============================================================================
    print("=======================================================================")
    print("START: Loading")
    print("=======================================================================")

    # ==============================================================================
    # Configuration
    # ==============================================================================
    try:
        setup = loadSetup(setup, path)
    except:
        sys.exit('ERROR: Configuration could not be loaded')

    # ==============================================================================
    # Parameter
    # ==============================================================================
    try:
        para = loadPara(setup, path)
    except:
        sys.exit('ERROR: Parameters could not be loaded')

    # ==============================================================================
    # MSG OUT
    # ==============================================================================
    print("=======================================================================")
    print("END: Loading")
    print("=======================================================================")
    print("\n")

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # MSG IN
    # ==============================================================================
    print("=======================================================================")
    print("START: Pre-Processing")
    print("=======================================================================")

    # ==============================================================================
    # Sanity Checks
    # ==============================================================================
    setup = sanityInput(para, setup)

    # ==============================================================================
    # Transfer Functions
    # ==============================================================================
    mdl = genTF(para, setup)

    # ==============================================================================
    # Control Mode
    # ==============================================================================
    setup = genLoadInput(setup)

    # ==============================================================================
    # MSG OUT
    # ==============================================================================
    print("=======================================================================")
    print("END: Pre-Processing")
    print("=======================================================================")
    print("\n")

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # MSG IN
    # ==============================================================================
    print("=======================================================================")
    print("START: Simulation")
    print("=======================================================================")

    # ==============================================================================
    # Init Topology
    # ==============================================================================
    top = initTopo(setup['Top']['sourceType'], setup)

    # ==============================================================================
    # Operating Mode
    # ==============================================================================
    # ------------------------------------------
    # Sweep
    # ------------------------------------------
    if setup['Exp']['type'] == 0:
        [time, freq, sweep] = calcSweep(top, mdl, para, setup)

    # ------------------------------------------
    # Stationary
    # ------------------------------------------
    elif setup['Exp']['type'] == 1:
        [time, freq] = calcSteady(top, mdl, para, setup)

    # ------------------------------------------
    # Transient
    # ------------------------------------------
    elif setup['Exp']['type'] == 2:
        [time, freq] = calcTrans(top, mdl, para, setup)

    # ------------------------------------------
    # Closed Loop
    # ------------------------------------------
    elif setup['Exp']['type'] == 3:
        [time, freq] = calcClose(top, mdl, para, setup)

    # ------------------------------------------
    # Default
    # ------------------------------------------
    else:
        print("ERROR: Invalid operation or topology")

    # ==============================================================================
    # MSG OUT
    # ==============================================================================
    print("=======================================================================")
    print("END: Simulation")
    print("=======================================================================")
    print("\n")

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # MSG IN
    # ==============================================================================
    print("=======================================================================")
    print("START: Post-Processing")
    print("=======================================================================")

    # ==============================================================================
    # Save Results
    # ==============================================================================
    if setup['Exp']['save'] == 1:
        saveResults(time, freq, sweep, setup, path)

    # ==============================================================================
    # Plot Results
    # ==============================================================================
    if setup['Exp']['type'] == 1 or setup['Exp']['type'] == 2:
        plotResults(time, setup)

    # ==============================================================================
    # Plot Results
    # ==============================================================================
    if setup['Exp']['plot'] != 0:
        plot(mdl, para, time, freq, sweep, setup)

    # ==============================================================================
    # MSG OUT
    # ==============================================================================
    print("=======================================================================")
    print("END: Post-Processing")
    print("=======================================================================")

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
