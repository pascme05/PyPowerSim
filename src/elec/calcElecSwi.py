#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         calcElecSwi
# Date:         01.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function calculates the currents and voltages of electrical switching devices.
Inputs:     1) Vdc:     dc link voltage of the converter cell (V)
            2) Is:      switching current (A)
            3) G:       binary ideal gate signal
            4) Tj:      junction temperature (Â°C)
            5) pos:     position of the switch (HS or LS)
            6) para:    parameters of the switch
            7) setup:   all setup variables
Outputs:    1) out:     output array including transistor and diode quantities
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import pandas as pd
import copy


#######################################################################################################################
# Function
#######################################################################################################################
def calcElecSwi(Vdc, Is, G, Tj, pos, para, setup):
    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    Vf = para['Swi']['Elec']['con']['Vf']
    Ron = para['Swi']['Elec']['con']['Ron']
    Vfd = para['Swi']['Elec']['con']['Vfd']
    RonD = para['Swi']['Elec']['con']['RonD']

    # ==============================================================================
    # Output
    # ==============================================================================
    out = pd.DataFrame(columns=['i_T', 'v_T', 'i_D', 'v_D'])

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Extract parameters
    # ==============================================================================
    # ------------------------------------------
    # Constant
    # ------------------------------------------
    if setup['Par']['Elec']['SwiMdl'] == "con":
        # IGBT
        if setup['Par']['Elec']['SwiType'] == "IGBT":
            VfT = Vf * np.ones(np.size(Is))
            VfD = Vfd * np.ones(np.size(Is))

        # MOSFET
        else:
            VfT = Vf * np.ones(np.size(Is))
            VfD = Vfd * np.ones(np.size(Is))

    # ------------------------------------------
    # Piece-wise linear (tbi)
    # ------------------------------------------
    elif setup['Par']['Elec']['SwiMdl'] == "pwl":
        # IGBT
        if setup['Par']['Elec']['SwiType'] == "IGBT":
            VfT = Vf + Ron * np.abs(Is)
            VfD = Vfd + RonD * np.abs(Is)

        # MOSFET
        else:
            VfT = Ron * np.abs(Is)
            VfD = Vfd + RonD * np.abs(Is)

    # ------------------------------------------
    # Tabular
    # ------------------------------------------
    else:
        VfT = para['Swi']['Elec']['tab']['Vce_2d']((Tj, abs(Is)))
        VfD = para['Swi']['Elec']['tab']['Vfd_2d']((Tj, abs(Is)))

    # ==============================================================================
    # Parameterize PWM Method
    # ==============================================================================
    if setup['Par']['PWM']['type'] == 0:
        VfT = np.zeros(np.size(Is))
        VfD = np.zeros(np.size(Is))

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Transistor
    # ==============================================================================
    if pos == 'HS':
        # ------------------------------------------
        # Voltage
        # ------------------------------------------
        v_T = Vdc * (~G).astype(float)
        v_T[Is > 0] = v_T[Is > 0] + (VfT[Is > 0]) * (G[Is > 0]).astype(float) + (VfD[Is > 0]) * (~G[Is > 0]).astype(float)
        v_T[Is <= 0] = v_T[Is <= 0] - (VfT[Is <= 0]) * (~G[Is <= 0]).astype(float) - (VfD[Is <= 0]) * (G[Is <= 0]).astype(float)

        # ------------------------------------------
        # Current
        # ------------------------------------------
        i_T = Is * G.astype(float)
        if setup['Par']['Elec']['SwiRecCon'] == "D":
            i_T[Is < 0] = 0
        else:
            i_T[Is < 0] = i_T[Is < 0] * (VfD[Is < 0] / (VfD[Is < 0] + VfT[Is < 0]))
    else:
        # ------------------------------------------
        # Voltage
        # ------------------------------------------
        v_T = Vdc * (~G).astype(float)
        v_T[Is <= 0] = v_T[Is <= 0] + (VfT[Is <= 0]) * (G[Is <= 0]).astype(float) + (VfD[Is <= 0]) * (~G[Is <= 0]).astype(float)
        v_T[Is > 0] = v_T[Is > 0] - (VfT[Is > 0]) * (~G[Is > 0]).astype(float) - (VfD[Is > 0]) * (G[Is > 0]).astype(float)

        # ------------------------------------------
        # Current
        # ------------------------------------------
        i_T = Is * G.astype(float) * (-1)
        if setup['Par']['Elec']['SwiRecCon'] == "D":
            i_T[Is > 0] = 0
        else:
            i_T[Is > 0] = i_T[Is > 0] * (VfD[Is > 0] / (VfD[Is > 0] + VfT[Is > 0]))

    # ==============================================================================
    # Diode
    # ==============================================================================
    if pos == 'HS':
        # ------------------------------------------
        # Voltage
        # ------------------------------------------
        v_D = -v_T

        # ------------------------------------------
        # Current
        # ------------------------------------------
        i_D = -copy.deepcopy(Is)
        i_D[Is > 0] = 0
        if setup['Par']['Elec']['SwiRecCon'] == "D":
            # HS Gate 0/1
            i_D[v_D < 0] = 0
        else:
            # HS Gate 0
            i_D[v_D < 0] = 0

            # HS Gate 1
            i_D = i_D * (VfT / (VfD + VfT))

            # Blanking time
            if setup['Par']['Elec']['SwiRecMdl'] == 1:
                i_D[(VfT > VfD) & (G.astype(float) == 1)] = 0

    else:
        # ------------------------------------------
        # Voltage
        # ------------------------------------------
        v_D = -v_T

        # ------------------------------------------
        # Current
        # ------------------------------------------
        i_D = copy.deepcopy(Is)
        i_D[Is < 0] = 0
        if setup['Par']['Elec']['SwiRecCon'] == "D":
            # HS Gate 0/1
            i_D[v_D < 0] = 0
        else:
            # HS Gate 0
            i_D[v_D < 0] = 0

            # HS Gate 1
            i_D = i_D * (VfT / (VfD + VfT))

            # Blanking time
            if setup['Par']['Elec']['SwiRecMdl'] == 1:
                i_D[(VfT > VfD) & ((~G).astype(float) == 1)] = 0

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Output
    # ==============================================================================
    # ------------------------------------------
    # Transistor
    # ------------------------------------------
    out['v_T'] = v_T / setup['Par']['Elec']['SwiSeries']
    out['i_T'] = i_T / setup['Par']['Elec']['SwiPara']

    # ------------------------------------------
    # Diode
    # ------------------------------------------
    out['v_D'] = v_D / setup['Par']['Elec']['SwiSeries']
    out['i_D'] = i_D / setup['Par']['Elec']['SwiPara']

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return out
