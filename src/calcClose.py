#######################################################################################################################
#######################################################################################################################
# Title:        PWM Distortion Toolkit for Standard Topologies
# Topic:        Power Electronics
# File:         calcClose
# Date:         14.05.2024
# Author:       Dr. Pascal A. Schirmer
# Version:      V.1.0
# Copyright:    Pascal Schirmer
#######################################################################################################################
#######################################################################################################################

#######################################################################################################################
# Function Description
#######################################################################################################################
"""
This function calculates the results for a closed loop solution for any given topology class.
Inputs:     1) top:     topology class
            2) mdl:     all models and transfer functions of the architecture
            3) para:    all parameters used in the simulation
            4) setup:   includes all simulation variables
Outputs:    1) time:    results in the time domain
            2) freq:    results in the frequency domain
"""

#######################################################################################################################
# Import libs
#######################################################################################################################
# ==============================================================================
# Internal
# ==============================================================================
from src.general.calcFreq import calcFreq
from src.elec.calcElecSwi import calcElecSwi
from src.elec.calcLossSwi import calcLossSwi
from src.elec.calcLossCap import calcLossCap
from src.general.calcAvg import calcAvg
from src.elec.calcElecCap import calcElecCap

# ==============================================================================
# External
# ==============================================================================
import numpy as np
import math
import pandas as pd
from tqdm import tqdm


#######################################################################################################################
# Function
#######################################################################################################################
def calcClose(top, mdl, para, setup):
    ###################################################################################################################
    # MSG IN
    ###################################################################################################################
    print("------------------------------------------")
    print("START: Closed loop solution class", top.name)
    print("------------------------------------------")

    ###################################################################################################################
    # Initialisation
    ###################################################################################################################
    # ==============================================================================
    # Parameters
    # ==============================================================================
    fel = setup['Top']['fel']
    fsim = setup['Exp']['fsim']
    fs = setup['Par']['PWM']['fs']
    fc = setup['Par']['Cont']['fc']
    Tel = 1 / fel
    Nsim = int(np.ceil(fsim / fel))
    Npwm = int(np.ceil(fs / fel))
    Ncon = int(Nsim/Npwm)
    K = int(setup['Dat']['stat']['cyc'])
    Nel = int(np.ceil(setup['Dat']['trans']['tmax'] * fel))
    Mi = setup['Dat']['stat']['Mi']

    # ==============================================================================
    # Variables
    # ==============================================================================
    E = setup['Top']['E']
    Vdc = setup['Dat']['stat']['Vdc']
    Tj = setup['Dat']['stat']['Tj']
    phiE = math.radians(setup['Top']['phiE'])
    phiV = math.radians(setup['Dat']['stat']['phi'])

    # ==============================================================================
    # Update Frequency
    # ==============================================================================
    iterCon = Nel * Ncon

    # ==============================================================================
    # Outputs
    # ==============================================================================
    out = top.initData()
    [_, timeElec, timeLoss, _, _, _, _, _, _] = top.initOut()

    ###################################################################################################################
    # Pre-Processing
    ###################################################################################################################
    # ==============================================================================
    # Generate Reference Waveform
    # ==============================================================================
    # ------------------------------------------
    # Time
    # ------------------------------------------
    t_ref = np.linspace(0, K / fel, K * Nsim + 1)
    t_tot = np.linspace(0, Nel * Tel, Nel * Nsim + 1)

    # ------------------------------------------
    # Reference
    # ------------------------------------------
    [v_ref, e_ref, _] = top.calcRef(E, phiE, phiV, [], setup)
    [_, e_tot, i_tot] = top.calcRef(E, phiE, phiV, t_tot, setup)

    ###################################################################################################################
    # Calculation
    ###################################################################################################################
    # ==============================================================================
    # Switching Function
    # ==============================================================================
    [xs, xsh, s, c, x, xN0] = top.calcPWM(v_ref, t_ref, Mi, setup)

    # ==============================================================================
    # Time Domain PWM Waveform (fundamental cycle)
    # ==============================================================================
    [timeAc, timeDc, _] = top.calcTime(s, e_ref, t_ref, Mi, mdl, Nsim * (K - 1), (K * Nsim + 1), [], 1, setup)

    # ==============================================================================
    # Controller Init
    # ==============================================================================
    s_i = {'A': np.ones(Ncon)}
    i_act = {'A': np.zeros(Ncon)}
    err_tot = []
    outSw = {'A': []}

    # ==============================================================================
    # Step Response
    # ==============================================================================
    for i in tqdm(range(iterCon), desc='Control-Periods', position=0):
        # ------------------------------------------
        # Controller
        # ------------------------------------------
        [s_i, Mi_con, err] = top.calcCON(i_tot, i_act, s_i, i*Ncon-1, setup)

        # ------------------------------------------
        # Append Result
        # ------------------------------------------
        outSw['A'] = np.append(outSw['A'], s_i['A'])
        err_tot = np.append(err_tot, err)
        e_con = {'A': np.zeros(len(outSw['A']))}
        t_con = np.linspace(0, (i+1) / fs, len(outSw['A']))

        # ------------------------------------------
        # Calculate Output
        # ------------------------------------------
        [tempAc, _, _] = top.calcTime(outSw, e_con, t_con, Mi_con, mdl, 0, len(outSw['A']), [], 0, setup)
        i_act['A'] = tempAc['i_a']

    ###################################################################################################################
    # Post-Processing
    ###################################################################################################################
    # ==============================================================================
    # Electrical Results
    # ==============================================================================
    # ------------------------------------------
    # Phase and Source
    # ------------------------------------------
    outSw['A'] = np.append(outSw['A'], s_i['A'])
    outSw['A'] = outSw['A'][0:len(t_tot)]
    [outAc, outDc, _] = top.calcTime(outSw, e_tot, t_tot, Mi, mdl, 0, len(t_tot), [], 0, setup)

    # ------------------------------------------
    # Switching Devices
    # ------------------------------------------
    for j in range(0, len(top.id2)):
        timeElec['sw'][top.id2[j]] = calcElecSwi(Vdc, top.id9[j] * outAc[top.id4[j]], (outSw[top.id3[j]] == (-1) ** j),
                                                 Tj, top.id5[j], para, setup)
        timeLoss['sw'][top.id2[j]] = calcLossSwi(outSw[top.id3[j]] * (-1) ** j,
                                                 timeElec['sw'][top.id2[j]]['i_T'], timeElec['sw'][top.id2[j]]['i_D'],
                                                 timeElec['sw'][top.id2[j]]['v_T'], timeElec['sw'][top.id2[j]]['v_D'],
                                                 Tj, para, setup)

    # ------------------------------------------
    # Capacitor
    # ------------------------------------------
    outDc['v_dc'] = calcElecCap(t_ref, outDc['i_c'], Tj, para, setup)
    timeLoss['cap']['C1'] = calcLossCap(t_ref, outDc['i_c'], Tj, para, setup)

    # ==============================================================================
    # Frequency domain
    # ==============================================================================
    [freqSw, freqAc, freqDc] = calcFreq(s['A'][Nsim:(K * Nsim + 1)], xs['A'][Nsim:(K * Nsim + 1)], timeAc['i_a'],
                                        timeAc['v_a'], timeAc['v_a0'], timeDc['i_dc'], timeDc['v_dc'])

    # ==============================================================================
    # Output
    # ==============================================================================
    [time, freq, _] = top.out(out['elec'], out['loss'], out['ther'], timeAc, timeDc, freqSw, freqAc, freqDc, [], [], t_ref,
                              v_ref, e_ref, s, c, xs, xsh, x, xN0, [], Nsim * (K - 1), (K * Nsim + 1), 1)

    ###################################################################################################################
    # MSG Out
    ###################################################################################################################
    print("------------------------------------------")
    print("END: Closed loop class", top.name)
    print("------------------------------------------")

    ###################################################################################################################
    # Return
    ###################################################################################################################
    return [time, freq]
